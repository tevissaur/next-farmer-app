// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String       @id @default(cuid())
  firstName       String?
  lastName        String?
  fullName        String?
  username        String?      @unique
  email           String?      @unique
  rating          Float?
  image           String?
  createdAt       DateTime     @default(now())
  articles        Article[]
  farms           Farm[]
  farmMemberships FarmMember[]
  cart            Cart[]
  Order           Order[]
}

model Category {
  id          String        @id @default(cuid())
  name        String
  slug        String
  createdAt   DateTime      @default(now())
  SubCategory SubCategory[]
}

model SubCategory {
  id         String   @id @default(cuid())
  name       String   @unique
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())

  @@index([categoryId])
}

model Filter {
  id        String   @id @default(cuid())
  label     String   @unique
  value     String
  type      String
  createdAt DateTime @default(now())
}

model FarmMember {
  id        String   @id @default(cuid())
  farmId    String
  userId    String
  farm      Farm?    @relation(fields: [farmId], references: [id])
  member    User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([farmId])
  @@index([userId])
}

model Farm {
  id             String         @id @default(cuid())
  name           String
  slug           String
  image          String
  description    String
  address        String
  rating         Float
  latitude       Float
  longitude      Float
  offersDelivery Boolean
  seasonId       String
  createdAt      DateTime       @default(now())
  ownerId        String
  products       Product[]
  owner          User?          @relation(fields: [ownerId], references: [id])
  members        FarmMember[]
  farmCategory   FarmCategory[]
  Order          Order[]

  @@index([ownerId])
  @@index([seasonId])
}

model FarmCategory {
  id         String   @id @default(cuid())
  farmId     String
  categoryId String
  farm       Farm     @relation(fields: [farmId], references: [id])
  createdAt  DateTime @default(now())

  @@index([farmId])
  @@index([categoryId])
}

model Season {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
}

model Cart {
  id        String        @id @default(cuid())
  total     Float
  products  CartProduct[]
  userId    String
  owner     User?         @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())

  @@index([userId])
}

model CartProduct {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  productId String
  farmId    String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  @@index([cartId])
}

model Product {
  id            String   @id @default(cuid())
  farmId        String
  name          String
  description   String
  price         Float
  unitOfMeasure String
  categoryId    String
  rating        Float
  createdAt     DateTime @default(now())
  farm          Farm?    @relation(fields: [farmId], references: [id])

  @@index([farmId])
}

model Order {
  id        String         @id @default(cuid())
  farmId    String
  userId    String
  farm      Farm?          @relation(fields: [farmId], references: [id])
  user      User?          @relation(fields: [userId], references: [id])
  products  OrderProduct[]
  createdAt DateTime       @default(now())

  @@index([farmId])
  @@index([userId])
}

model OrderProduct {
  id         String   @id @default(cuid())
  productId  String
  farmId     String
  quantity   Int
  totalPrice Float
  createdAt  DateTime @default(now())
  order      Order?   @relation(fields: [orderId], references: [id])
  orderId    String?

  @@index([orderId])
}

model Article {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.VarChar(1000)
  articleType String
  authorId    String
  farmId      String?
  productId   String?
  likes       Int?
  createdAt   DateTime @default(now())
  author      User?    @relation(fields: [authorId], references: [id])

  @@index([authorId])
  @@index([farmId])
  @@index([productId])
}
